/**
    To mantain the coherence across color in the app.
    Return dark or light color based on lightness of a color
    based on variables color.

*/
@function check-color-lightness-and-return-light-or-dark($color) {
  @if map-has-key($map: $colors, $key: $color) {
    $c: map-get($map: $colors, $key: $color);
    $l: lightness($c);

    @if $l <= 50% {
      @return map-get($map: $colors, $key: light);
    } @else {
      @return map-get($map: $colors, $key: dark);
    }
  }
  @error "The color `#{$color}` does not exists in the $colors map variable";
}

/**
    Provide a secure way to access variable.
    If these does not exists will warn the dev and use the color as fallback
*/
@function retrieve-color-from-variables($color) {
  @if map-has-key($map: $colors, $key: $color) {
    @return map-get($map: $colors, $key: $color);
  }
  @warn "The color `#{$color}` was not found in `$colors` array \
      Using `#{$color}` as fallback value";
  @return $color;
}

/**
    Centralized way to control color from $colors variable.
*/
@function darken-color-based-on-lightness($color) {
  @debug $color;
  @if map-has-key($map: $colors, $key: $color) {
    $c: map-get($map: $colors, $key: $color);
    $l: lightness($c);
    @if $l <10% {
        @return darken($c, 4%);
    }
    @if $l <20% {
        @return darken($c, 5%);
    }
    @return darken($c, 10%);
  }
  @error "The color `#{$color}` does not exists in the $colors map variable";
}
